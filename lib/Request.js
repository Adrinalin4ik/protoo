/**
 * Expose the Request class.
 */
module.exports = Request;


/**
 * Dependencies.
 */
var EventEmitter = require('events').EventEmitter,
	util = require('util'),
	debug = require('debug')('protoo:Request'),
	randomNumber = require('random-number'),
	Response = require('./Response'),


/**
 * Local variables.
 */
	idGenerator = randomNumber.generator({
		min: 1000000,
		max: 9999999,
		integer: true
	});


function Request() {
	EventEmitter.call(this);

	/**
	 * JSON fields.
	 * - id:     Number (ro), mandatory.
	 * - method: String (ro), mandatory.
	 * - path:   String (ro), mandatory for incoming requests, removed in outgoing
	 *           or forwarded requests.
	 * - data:   Object (rw), optional.
	 * - sender: Object (ro), optional for outgoing requests, ignored in incoming
	 *           requests:
   *   - username: String, mandatory.
   *   - uuid:     String, mandatory.
	 */

	/**
	 * Public attributes.
	 * - app:   Application (ro), the Protoo app.
	 * - peer:   Peer (ro), associated peer sender.
	 * - params  Object (ro), generated by the routing.
	 * - ended   Boolean (ro), final reply was sent, no more replies allowed.
	 */

	/**
	 * Private attributes.
	 * - _toString:   String, for toString() method.
	 * - _settings:   Object, custom data set with set().
	 * Routing attributes:
	 * - originalPath
	 * - basePath
	 * - next
	 * - route
	 */
}


util.inherits(Request, EventEmitter);


/**
 * Class methods.
 */

Request.factory = function (req) {
	req.__proto__ = new Request();
	// Object.setPrototypeOf(req, new Request());
	req.init();

	return req;
};


/**
 * Instance methods.
 */


Request.prototype.init = function () {
	if (!this.id) {
		this.id = idGenerator();
	}

	this.data = this.data || {};
	this.ended = false;
	this._settings = {};
};


Request.prototype.toString = function () {
	return this._toString || (this._toString = '[method:' + this.method + ', id:' + this.id + ', path:' + (this.originalPath || this.path) + ']');
};


Request.prototype.json = function () {
	var json = {
		method:  this.method,
		id:      this.id,
		data:    this.data
	};

	if (this.sender) {
		json.sender = this.sender;
	}

	return JSON.stringify(json);
};


Request.prototype.set = function (key, value) {
	this._settings[key] = value;
};


Request.prototype.get = function (key) {
	return this._settings[key];
};


Request.prototype.reply = function (status, reason, data) {
	var res;

	if (status instanceof Response) {
		res = status;
	} else {
		// Create a Response instance.
		res = Response.factory({
			id: this.id,
			status: status,
			reason: reason || '',
			data: data
		});
	}

	if (res.status >= 200) {
		if (this.ended) {
			throw new Error('protoo.Request.reply() | request was already replied with a final response');
		}

		this.ended = true;
	}

	debug('reply() | %s', res);

	// Emit "outgoingResponse".
	this.emit('outgoingResponse', res);

	// Send it.
	this.peer.send(res);
};


Request.prototype.createResponse = function (status, reason, data) {
	// Return a Response instance.
	return Response.factory({
		id: this.id,
		status: status,
		reason: reason || '',
		data: data
	});
};
