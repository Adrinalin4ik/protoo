/**
 * Expose the Request class.
 */
module.exports = Request;


/**
 * Dependencies.
 */
var debug = require('debug')('protoo:Request');
// var debugerror = require('debug')('protoo:ERROR:Request');
var Response = require('./Response');
var isPositiveInteger = require('./Utils').isPositiveInteger;


function Request() {
	/**
	 * JSON fields.
	 * - id:     String (ro), mandatory.
	 * - method: String (ro), mandatory.
	 * - path:   String (ro), mandatory for incoming requests, removed in outgoing
	 *           or forwarded requests.
	 * - data:   Object (rw), optional.
	 * - sender: Object (ro), optional for outgoing requests, ignored in incoming
	 *           requests:
   *   - username: String, mandatory.
   *   - uuid:     String, mandatory.
	 */

	/**
	 * Public attributes.
	 * - app:   Application (ro), the Protoo app.
	 * - peer:   Peer (ro), associated peer sender.
	 * - params  Object (ro), generated by the routing.
	 * - ended   Boolean (ro), final reply was sent, no more replies allowed.
	 */

	/**
	 * Private attributes.
	 * - _toString:   String, for toString() method.
	 * - _settings:   Object, custom data set with set().
	 * - _onresponse: Array of functions for generated replies.
	 * Routing attributes:
	 * - originalPath
	 * - basePath
	 * - next
	 * - route
	 */
}


/**
 * Class methods.
 */

Request.factory = function(msg) {
	msg.__proto__ = new Request();
	msg.init();

	return msg;
};


/**
 * Instance methods.
 */

Request.prototype.init = function() {
	this.data = this.data || {};
	this.ended = false;
	this._settings = {};
	this._onresponse = [];
};


Request.prototype.toString = function() {
	return this._toString || (this._toString = '[method:' + this.method + ', id:' + this.id + ', path:' + (this.originalPath || this.path) + ']');
};
// Request.prototype.valueOf = Request.prototype.toString;


Request.prototype.json = function() {
	var req = {
		method:  this.method,
		id:      this.id
	};

	if (this.data)   { req.data = this.data; }
	if (this.sender) { req.sender = this.sender; }

	return JSON.stringify(req);
};


Request.prototype.set = function(key, value) {
	this._settings[key] = value;
};


Request.prototype.get = function(key) {
	return this._settings[key];
};


Request.prototype.reply = function(status, reason, data) {
	var ended = false,
		response,
		_onresponse = this._onresponse;

	if (! isPositiveInteger(status)) {
		throw new Error('protoo.Request.reply() | status must be positive integer');
	}

	if (status < 100 || status > 699) {
		throw new Error('protoo.Request.reply() | status must be 100..699');
	}

	if (status >= 200) {
		if (this.ended && status >= 200) {
			throw new Error('protoo.Request.reply() | request was already replied with a final response');
		}

		ended = true;
	}

	// Create an Response instance.
	response = Response.factory({
		id: this.id,
		status: status,
		reason: reason || '',
		data: data
	});

	// Execute response listeners in reverse order.
	for (var i=_onresponse.length; i-- > 0;) {
		_onresponse[i](response);
	}

	debug('reply() | %s', response);

	// Send it.
	// TODO: Peer#send() is documented for just sending requests...
	this.peer.send(response);

	// Update ended flag.
	this.ended = ended;
};


Request.prototype.onresponse = function(listener) {
	this._onresponse.push(listener);
};

